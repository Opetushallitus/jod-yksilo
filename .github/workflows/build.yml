name: build
on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    permissions:
      checks: write
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - uses: gradle/actions/setup-gradle@v3

      - name: Build with Gradle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar

      - uses: actions/upload-artifact@v4
        with:
          name: application
          path: |
            build/libs/jod-yksilo-*.jar
            !build/libs/*-plain.jar

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reports
          path: build/reports/

  package:
    needs: build
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.docker-meta.outputs.tags }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: application
          path: build/libs

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.JOD_UTIL_AWS_ROLE_ARN }}
          aws-region: eu-west-1

      - uses: docker/setup-buildx-action@v3
      - uses: docker/setup-qemu-action@v3

      - uses: docker/metadata-action@v5
        id: docker-meta
        with:
          images: "${{ vars.JOD_ECR }}/oph/jod-yksilo"
          tags: |
            type=sha

      - name: Login to ECR
        id: ecr-login
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.JOD_ECR }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        id: docker-build
        with:
          pull: true
          push: "${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}"
          platforms: linux/arm64,linux/amd64
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          file: docker/Dockerfile
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - if: github.ref == 'refs/heads/main'
        run: |
          cat <<EOF >>$GITHUB_STEP_SUMMARY
          Created image: ${{ steps.docker-meta.outputs.tags }}
          EOF

  deploy:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    permissions:
      id-token: write
    needs: package
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.JOD_AWS_DEPLOY_ROLE_ARN }}
          aws-region: eu-west-1

      - name: Download task definition
        run: >
          aws ecs describe-task-definition
          --task-definition ${{ vars.JOD_ECS_TASKDEF }}
          --query taskDefinition > task-definition.json

      - uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-task-def
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.JOD_ECS_APP_CONTAINER }}
          image: ${{ needs.package.outputs.tags }}

      - name: Deploy ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        id: ecs-deploy
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ vars.JOD_ECS_SERVICE }}
          cluster: ${{ vars.JOD_ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Ensure that deploy worked
        run: |
          CURRENT_TASK_DEF_ARN=$(aws ecs describe-services --cluster ${{ vars.JOD_ECS_CLUSTER }} --services ${{ vars.JOD_ECS_SERVICE }} --query services[0].deployments[0].taskDefinition --output text)
          NEW_TASK_DEF_ARN=${{ steps.ecs-deploy.outputs.task-definition-arn }}
          if [ "$CURRENT_TASK_DEF_ARN" != "$NEW_TASK_DEF_ARN" ]; then
            echo "Deployment was rolled back"
            exit 1
          fi

      - name: Update image tag parameter
        env:
          TAG: ${{ needs.package.outputs.tags }}
        run: >
          aws ssm put-parameter --overwrite --type String
          --name ${{ vars.JOD_IMAGE_TAG_PARAM }} --value "${TAG##*:}"
