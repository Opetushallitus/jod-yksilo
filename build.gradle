plugins {
  id 'java'
  id 'jacoco'

  id 'org.springframework.boot' version '3.2.6'
  id 'io.spring.dependency-management' version '1.1.5'

  id 'checkstyle'
  id "com.diffplug.spotless" version "6.25.0"
  id "com.github.spotbugs" version "6.0.15"
  id "org.sonarqube" version "5.0.0.4638"
  id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'

  id "io.snyk.gradle.plugin.snykplugin" version "0.6.1"
  id "com.github.ben-manes.versions" version "0.51.0"
}

group = 'fi.okm.jod'
version = '0.0.1-SNAPSHOT'

java {
  sourceCompatibility = '21'
}

compileJava {
  options.compilerArgs << '-Xlint:all,-processing,-serial'
}

repositories {
  mavenCentral()
}

ext {
  spotbugsVersion = "4.8.5"
  //flyway 9.x does not claim support for PostgreSQL 16
  set("flyway.version", "10.13.0")
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-redis'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'

  implementation 'org.springframework.session:spring-session-data-redis'

  implementation platform('io.awspring.cloud:spring-cloud-aws-dependencies:3.1.1')
  implementation 'io.awspring.cloud:spring-cloud-aws-starter-parameter-store'

  implementation 'io.micrometer:micrometer-tracing-bridge-brave'
  implementation 'io.micrometer:micrometer-registry-cloudwatch2'
  implementation 'io.zipkin.aws:brave-propagation-aws'

  implementation platform('software.amazon.awssdk:bom:2.25.58')
  implementation 'software.amazon.awssdk:auth'
  implementation 'software.amazon.awssdk:rds'
  implementation 'software.amazon.awssdk:sagemakerruntime'
  implementation 'software.amazon.awssdk:cloudwatch'

  implementation 'com.google.guava:guava:33.2.0-jre'

  implementation "org.flywaydb:flyway-core"
  implementation "org.flywaydb:flyway-database-postgresql:${property('flyway.version')}"

  // Logging in JSON format
  implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

  // OpenAPI API description and Swagger UI
  implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.5.0'
  developmentOnly 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

  runtimeOnly 'org.postgresql:postgresql'

  annotationProcessor 'org.springframework:spring-context-indexer'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen'
  annotationProcessor 'org.projectlombok:lombok'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.boot:spring-boot-testcontainers'
  testImplementation 'org.springframework.security:spring-security-test'

  testImplementation "org.testcontainers:postgresql"

  testImplementation 'org.testcontainers:junit-jupiter'
  testImplementation 'org.junit.jupiter:junit-jupiter'

  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  testAnnotationProcessor 'org.projectlombok:lombok'

  testCompileOnly 'org.projectlombok:lombok'

  // spotbugs
  implementation "com.github.spotbugs:spotbugs-annotations:$spotbugsVersion"

}

tasks.named('test', Test) {
  useJUnitPlatform()
  jvmArgs += '-XX:+EnableDynamicAgentLoading'
  testLogging {
    events("passed", "skipped", "failed")
  }
}

checkstyle {
  toolVersion = '10.12.7'
  showViolations = false

  def archive = configurations.checkstyle.filter {
    it.name.startsWith("checkstyle")
  }
  config = resources.text.fromArchiveEntry(archive, "google_checks.xml")
}

spotless {
  java {
    googleJavaFormat()
    licenseHeader '''\
    /*
     * Copyright (c) $YEAR The Finnish Ministry of Education and Culture, The Finnish
     * The Ministry of Economic Affairs and Employment, The Finnish National Agency of
     * Education (Opetushallitus) and The Finnish Development and Administration centre
     * for ELY Centres and TE Offices (KEHA).
     *
     * Licensed under the EUPL-1.2-or-later.
     */

     '''.stripIndent()
  }
}

jacoco {
  toolVersion = "0.8.11"
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
  reports.xml.required = true
  reports.html.required = true
}

spotbugs {
  toolVersion = spotbugsVersion
  excludeFilter = file('gradle/config/spotbugs/exclusions.xml')
}

spotbugsMain {
  reports {
    html {
      required = true
    }
    xml {
      required = true
    }
  }
}

spotbugsTest.enabled = false

snyk {
  autoDownload = true
  autoUpdate = true
}

bootJar {
  manifest {
    attributes(
        'Implementation-Title': "${rootProject.name}",
        'Implementation-Version': "${project.version}"
    )
  }
}

springBoot {
  buildInfo {
    excludes = ['time']
  }
}

tasks.register('installGitHooks', Copy) {
  from("${rootProject.rootDir}/scripts/git-hooks") {
    include 'pre-*'
  }
  into "${rootProject.rootDir}/.git/hooks"
  fileMode 0775
}

if (System.getenv("CI") == null) {
  build.dependsOn('installGitHooks')
}

sonar {
  properties {
    property "sonar.projectKey", "Opetushallitus_jod-yksilo"
    property "sonar.organization", "opetushallitus"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.java.spotbugs.reportPaths", "build/reports/spotbugs/main.xml"
  }
}

openApi {
  apiDocsUrl = "http://localhost:8080/openapi/openapi.json"
  waitTimeInSeconds = 20
  customBootRun {
    args = [
        "--spring.main.lazy-initialization=true",
        "--logging.level.root=WARN",
    ]
  }
}

tasks.named("dependencyUpdates").configure {
  checkConstraints = true
  checkBuildEnvironmentConstraints = true
  rejectVersionIf {
    it.candidate.version.containsIgnoreCase("alpha")
        || it.candidate.version.containsIgnoreCase("beta")
        || it.candidate.version.matches(".*-M\\d+")
  }
}
